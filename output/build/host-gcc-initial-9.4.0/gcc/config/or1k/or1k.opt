; OpenRISC command line options

; Copyright (C) 2010-2019 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

; See the GCC internals manual (options.texi) for a description of
; this file's format.

; Please try to keep this file in ASCII collating order.

HeaderInclude
config/or1k/or1k-opts.h

mhard-div
Target RejectNegative InverseMask(SOFT_DIV)
Use hardware divide instructions, use -msoft-div for emulation.

mhard-mul
Target RejectNegative InverseMask(SOFT_MUL).
Use hardware multiply instructions, use -msoft-mul for emulation.

mcmodel=
Target RejectNegative Joined Enum(or1k_cmodel_type) Var(or1k_code_model) Init(CMODEL_SMALL)
Specify the code model used for accessing memory addresses.  Specifying large
enables generating binaries with large global offset tables.  By default the
value is small.

Enum
Name(or1k_cmodel_type) Type(enum or1k_cmodel_type)
Known code model types (for use with the -mcmodel= option):

EnumValue
Enum(or1k_cmodel_type) String(small) Value(CMODEL_SMALL)

EnumValue
Enum(or1k_cmodel_type) String(large) Value(CMODEL_LARGE)

mcmov
Target RejectNegative Mask(CMOV)
Allows generation of binaries which use the l.cmov instruction.  If your target
does not support this the compiler will generate the equivalent using set and
branch.

mror
Target RejectNegative Mask(ROR)
Allows generation of binaries which use the l.rori instructions.

msext
Target RejectNegative Mask(SEXT)
Allows generation of binaries which use sign-extension instructions.  If your
target does not support this the compiler will use memory loads to perform sign
extension.

msfimm
Target RejectNegative Mask(SFIMM)
Allows generation of binaries which use l.sf*i instructions.  If your target
does not support this the compiler will generate instructions to store the
immediate to a register first.

mshftimm
Target RejectNegative Mask(SHFTIMM)
Allows generation of binaries which support shifts and rotate instructions
supporting immediate arguments, for example l.rori.

msoft-div
Target RejectNegative Mask(SOFT_DIV)
Use divide emulation.

msoft-mul
Target RejectNegative Mask(SOFT_MUL).
Use multiply emulation.
